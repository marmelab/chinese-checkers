services:
  game-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chinese-checkers-game-api
    volumes:
      - .:/app
      - ./.cache/go-build:/root/.cache/go-build
      - ./.cache/pkg/mod:/go/pkg/mod
    working_dir: /app
    entrypoint: ["go", "run", "api/chinese-checkers/main.go"]
    tty: true
    environment:
      - GOFLAGS=-buildvcs=false
  
###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-17}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

  postgrest:
    container_name: chinese-checkers-postgrest
    image: postgrest/postgrest:latest
    # Available environment variables documented here:
    # https://postgrest.org/en/latest/configuration.html#environment-variables
    environment:
      # The standard connection URI format, documented at
      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
      - PGRST_DB_URI=postgres://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}
      # The name of which database schema to expose to REST clients
      - PGRST_DB_SCHEMA=${POSTGREST_DB_SCHEMA:-public}
      # The database role to use when no client authentication is provided
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE:-authenticator}
      # Overrides the base URL used within the OpenAPI self-documentation hosted at the API root path
      - PGRST_OPENAPI_SERVER_PROXY_URI=https://chinese-checkers.marmelab.com/postgrest
      # Set the JWT secret for authentication.
      - PGRST_JWT_SECRET=@/app/public.jwk
    volumes:
      - "./web/config/jwt/public.jwk:/app/public.jwk"
    restart: always

  php:
    build:
      context: web
      target: frankenphp_dev
    restart: unless-stopped
    environment:
      SERVER_NAME: ${SERVER_NAME:-localhost}, ${SERVER_NAME:-localhost}:80, php:80
      MERCURE_PUBLISHER_JWT_KEY: ${MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      # Run "composer require symfony/orm-pack" to install and configure Doctrine ORM
      DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-17}&charset=${POSTGRES_CHARSET:-utf8}
      # Run "composer require symfony/mercure-bundle" to install and configure the Mercure integration
      MERCURE_URL: ${CADDY_MERCURE_URL:-http://php/.well-known/mercure}
      MERCURE_PUBLIC_URL: ${CADDY_MERCURE_PUBLIC_URL:-https://${SERVER_NAME:-localhost}:${HTTPS_PORT:-443}/.well-known/mercure}
      MERCURE_JWT_SECRET: ${MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      # The two next lines can be removed after initial installation
      SYMFONY_VERSION: ${SYMFONY_VERSION:-}
      STABILITY: ${STABILITY:-stable}
      # Application specific environment
      APP_GAME_ENGINE_API_URL: ${APP_GAME_ENGINE_API_URL:-http://game-api:3003}
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp

# Mercure is installed as a Caddy module, prevent the Flex recipe from installing another service
###> symfony/mercure-bundle ###
###< symfony/mercure-bundle ###

volumes:
  caddy_data:
  caddy_config:
  ###> doctrine/doctrine-bundle ###
  database_data:
  ###< doctrine/doctrine-bundle ###
###> symfony/mercure-bundle ###
###< symfony/mercure-bundle ###
